# -*- coding: utf-8 -*-
"""Copy of healthcare.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lvI61RN9KphkMI8mP1DTrXVlNBNfJspS
"""



"""# New Section"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('data.csv')

df

df.head()

df.describe()

df.info()

df.isnull().sum()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report,roc_auc_score, roc_curve
from sklearn.feature_selection import SelectFromModel

from sklearn.ensemble import RandomForestClassifier

# Encode the target variable: Malignant (M) = 1, Benign (B) = 0
df['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})

# Separate features (X) and target (y)
X = df.drop(columns=['diagnosis', 'id'])  # Drop 'id' as it's not a feature
y = df['diagnosis']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

from sklearn.preprocessing import StandardScaler

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy=accuracy_score(y_test,y_pred)

print(accuracy)

conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Benign', 'Malignant'], yticklabels=['Benign', 'Malignant'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

print(classification_report(y_test,y_pred))

# ROC Curve and AUC Score
y_pred_proba = model.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
auc_score = roc_auc_score(y_test, y_pred_proba)

plt.plot(fpr, tpr, label=f'AUC = {auc_score:.2f}')
plt.plot([0, 1], [0, 1], linestyle='--', color='gray')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

feature_importances = model.feature_importances_
feature_names = X.columns
feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importances})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

print("Top 10 Important Features:")
print(feature_importance_df.head(10))

sns.barplot(x='Importance', y='Feature', data=feature_importance_df.head(10))
plt.title('Top 10 Important Features')
plt.show()

# Addressing Misclassification Risks
false_positives = conf_matrix[0, 1]
false_negatives = conf_matrix[1, 0]

print(f"False Positives (Benign as Malignant): {false_positives}")
print(f"False Negatives (Malignant as Benign): {false_negatives}")

y_pred_proba = model.predict_proba(X_test)

# Minimizing False Negatives (critical in medical diagnosis)
# Adjust the decision threshold to reduce false negatives
y_pred_adjusted=(y_pred_proba[:,1]>=0.3).astype(int)

# Evaluate adjusted predictions
adjusted_conf_matrix = confusion_matrix(y_test, y_pred_adjusted)
adjusted_accuracy = accuracy_score(y_test, y_pred_adjusted)

print("Adjusted Confusion Matrix:")
print(adjusted_conf_matrix)
print(f"Adjusted Accuracy: {adjusted_accuracy:.2f}")

print("Ethical and Practical Challenges:")
print("1. Bias in Data: Ensure the dataset is representative of diverse populations.")
print("2. Explainability: Provide clear explanations for model predictions to gain trust from medical professionals.")
print("3. Regulatory Compliance: Ensure the model meets healthcare regulations like HIPAA.")
print("4. Integration: Seamlessly integrate the model into existing hospital workflows.")

from sklearn.tree import plot_tree

plt.figure(figsize=(20, 10))
tree_to_visualize = model.estimators_[0]  # Select the first tree in the forest
plot_tree(tree_to_visualize, feature_names=X.columns, class_names=['Benign', 'Malignant'], filled=True, rounded=True)
plt.title("Decision Tree from Random Forest")
plt.show()



from sklearn.tree import DecisionTreeClassifier

dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)

print("Decision Tree Accuracy:", accuracy_score(y_test, y_pred))



